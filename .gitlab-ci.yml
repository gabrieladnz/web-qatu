#test
stages:
  - install
  - build
  - test
  - coverage
  - static_analysis
  - quality_gate
  - docker_build
  - docker_push
  - acceptance_tests

variables:
  VERSION: "DEV-2.3.2"
  IMAGE_NAME: "my-shop-backend"

install_dependencies:
  stage: install
  image: node:18
  script:
    - cd backend/qatu
    - npm ci
  artifacts:
    paths:
      - backend/qatu/node_modules/

build_app:
  stage: build
  image: node:18
  script:
    - cd backend/qatu
    - echo "Nada a compilar, JavaScript puro"

unit_tests:
  stage: test
  image: node:18
  script:
    - cd backend/qatu
    - npm test

test_coverage:
  stage: coverage
  image: node:18
  script:
    - cd backend/qatu
    - npm run coverage
  artifacts:
    paths:
      - backend/qatu/coverage/
    when: always

static_code_analysis:
  stage: static_analysis
  image: sonarsource/sonar-scanner-cli:latest
  script:
    - cd backend/qatu
    - sonar-scanner -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.organization=testdeploy -Dsonar.token=$SONAR_TOKEN_BACKEND -Dsonar.projectKey=testdeploy_qatu-backend

quality_gate_check:
  stage: quality_gate
  image: curlimages/curl:latest
  script:
    - echo "Verificando Quality Gate via API do SonarQube (ou usar waitForQualityGate se via Jenkins com scanner CLI)"

docker_build:
  stage: docker_build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
    - docker build -t $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$VERSION backend/qatu
    - docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$VERSION
  artifacts:
    name: "docker-image-info"
    expire_in: 1 hour
    paths:
      - image_info.txt
  after_script:
    - echo "$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$VERSION" > image_info.txt

docker_push:
  stage: docker_push
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  dependencies:
    - docker_build
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
    - echo "Imagem já está no registry do GitLab."

acceptance_tests:
  stage: acceptance_tests
  image: curlimages/curl:latest
  script:
    - |
      echo "Executando testes de aceitação no ambiente de produção..."

      # Gera e-mail randômico
      EMAIL="teste+$(date +%s)@teste.com"
      echo "E-mail de teste gerado: $EMAIL"

      # 1. Teste GET /api/products
      echo "Testando GET /api/products"
      code=$(curl -s -o /dev/null -w "%{http_code}" https://qatu-backend-production.up.railway.app/api/products)
      if [ "$code" != "200" ]; then
        echo "❌ /api/products falhou - HTTP $code"
        exit 1
      fi

      # 2. Teste GET /api/products/:id
      echo "Testando GET /api/products/683d16f0bd2722a068f98431"
      code=$(curl -s -o /dev/null -w "%{http_code}" https://qatu-backend-production.up.railway.app/api/products/683d16f0bd2722a068f98431)
      if [ "$code" != "200" ]; then
        echo "❌ /api/products/:id falhou - HTTP $code"
        exit 1
      fi

      # 3. Teste POST /api/users/register
      echo "Testando POST /api/users/register com e-mail $EMAIL"
      code=$(curl -s -o /dev/null -w "%{http_code}" -X POST https://qatu-backend-production.up.railway.app/api/users/register \
        -H "Content-Type: application/json" \
        -d "{\"name\":\"Teste\",\"email\":\"$EMAIL\",\"password\":\"123456\"}")
      if [ "$code" != "201" ] && [ "$code" != "200" ]; then
        echo "❌ /api/users/register falhou - HTTP $code"
        exit 1
      fi

      # 4. Teste POST /api/users/login
      echo "Testando POST /api/users/login com e-mail $EMAIL"
      code=$(curl -s -o /dev/null -w "%{http_code}" -X POST https://qatu-backend-production.up.railway.app/api/users/login \
        -H "Content-Type: application/json" \
        -d "{\"email\":\"$EMAIL\",\"password\":\"123456\"}")
      if [ "$code" != "200" ]; then
        echo "❌ /api/users/login falhou - HTTP $code"
        exit 1
      fi
  only:
    - main
# ===================== Frontend Pipeline =====================

frontend_pipeline:
  stage: build
  image: node:20
  script:
    - cd frontend/qatu
    - echo "Transpilando se necessário"
    - npm install
    - npm run build || echo "Sem build necessário"

frontend_tests:
  stage: test
  image: node:20
  variables:
    CI: "true"
  before_script:
    - cd frontend/qatu
    - apt-get update -qq
    - apt-get install -y -qq wget gnupg
    - wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
    - echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list
    - apt-get update -qq
    - apt-get install -y -qq google-chrome-stable
    - npm ci
  script:
    - npx ng test --watch=false --karma-config=./karma.conf.js --browsers=ChromeHeadlessCINoSandbox
  retry:
    max: 1

frontend_static_scan:
  stage: static_analysis
  image: sonarsource/sonar-scanner-cli:latest
  script:
    - cd frontend/qatu
    - sonar-scanner -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.organization=testdeploy -Dsonar.token=$SONAR_TOKEN_FRONTEND -Dsonar.projectKey=testdeploy_my-shop-frontend

frontend_quality_gate:
  stage: quality_gate
  image: curlimages/curl:latest
  script:
    - echo "Verificando Quality Gate via API do SonarQube para o FE"

frontend_build_image:
  stage: docker_build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
    - docker build -t $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$VERSION frontend/qatu
    - docker push $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$VERSION

frontend_push_image:
  stage: docker_push
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  script:
    - echo "Imagem frontend já enviada."